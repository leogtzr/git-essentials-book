# How to list global config without a pager:
git --no-pager config -l

# How to set config at local repo level:
git config --local user.name "Your Name"
git config --local user.email you@example.com
--system for system-wide, --global for user level.
Default is repo level if non of the options are specified.

# How to check blobs:
git cat-file -p HASH

# git log
git --no-pager log --format=raw
git --no-pager log --format=fuller
git --no-pager log --oneline
git -P log --no-color --oneline --graph --decorate
git -P log --no-color --oneline --graph --decorate --all 			# display for all the branches.

# Add and commit
git commit -am "message"

# How to create a branch
git branch berries

# How to check the current branch:
git -P branch --no-color

# How to switch to a branch:
git checkout berries
git checkout - 			# switch to the previous branch where we were

# Moving to a previous state:

[0 [11:46][leo@grocery]$ git -P log --no-color --oneline --graph --decorate --all
* d8591a1 (HEAD -> berries) add a blackberry
* 8b637e6 (master) add an orange
* 928c44c add an aple
* d5f7c43 removing additional line to sync up with the book
* c17f32e Add durazno to the shopping list :)
[0 [11:47][leo@grocery]$ man git reset
[0 [11:48][leo@grocery]$ git reset --hard master
HEAD is now at 8b637e6 add an orange
[0 [11:49][leo@grocery]$ git -P log --no-color --oneline --graph --decorate --all
* 8b637e6 (HEAD -> berries, master) add an orange
* 928c44c add an aple
* d5f7c43 removing additional line to sync up with the book
* c17f32e Add durazno to the shopping list :)
[0 [11:49][leo@grocery]$ 

# Move the actual branch to a specific commit:
git reset --hard HASH

# How to step back:
[0 [13:00][leo@grocery]$ git -P log --no-color --oneline --graph --decorate --all
* a075685 (HEAD -> berries, melons) add a watermelon
* d8591a1 add a blackberry
* 8b637e6 (master) add an orange
* 928c44c add an aple
* d5f7c43 removing additional line to sync up with the book
* c17f32e Add durazno to the shopping list :)
[0 [13:00][leo@grocery]$ git reset --hard HEAD^
HEAD is now at d8591a1 add a blackberry
[0 [13:01][leo@grocery]$ 

# How to check reflogs for a specific branch:
leo@lein ~/code/repos/grocery (master) $ git -P branch
  berries
  bug
* master
  melons
leo@lein ~/code/repos/grocery (master) $ git -P reflog show melons
a075685 (melons) melons@{0}: branch: Created from berries
leo@lein ~/code/repos/grocery (master) $ 

# How to create a tag to a specific commit:
git tag myTag COMMIT-HASH

# How to create an annotated tag:
git tag -a annotatedTag f5c8b7c

# To unstage the change:
git reset HEAD

# Differences between the working tree and the staged area:
git diff
git -P diff

# Differences between the last commit and the staged area:
leo@lein ~/code/repos/grocery (master) $ git -P diff --cached HEAD
diff --git a/shoppingList.txt b/shoppingList.txt
index 175eeef..f961a4c 100644
--- a/shoppingList.txt
+++ b/shoppingList.txt
@@ -2,3 +2,4 @@ banana
 apple
 orange
 peach
+onion
leo@lein ~/code/repos/grocery (master) $ 

Or:
git diff --cached

# Differences between the HEAD version and the working tree:
git diff HEAD
git -P diff HEAD

# Removing changes from the staging area
git reset HEAD <FILE>

If we want to go back or destroy the changes:
git checkout -- <shoppingList.txt|FILE>

[0 [10:53]leo@lein ~/code/repos/grocery (master) $ git checkout -- shoppingList.txt 
[0 [10:53]leo@lein ~/code/repos/grocery (master) $ git -P diff
[0 [10:53]leo@lein ~/code/repos/grocery (master) $ git -P status
On branch master
nothing to commit, working tree clean
[0 [10:53]leo@lein ~/code/repos/grocery (master) $ 

# How to delete/remove a branch:
git branch -d <BRANCH-NAME>

[0 [10:53]leo@lein ~/code/repos/grocery (master) $ git branch -d bug
error: The branch 'bug' is not fully merged.
If you are sure you want to delete it, run 'git branch -D bug'.
[0 [10:53]leo@lein ~/code/repos/grocery (master) $ git branch -D bug
Deleted branch bug (was eb21648).
[0 [10:53]leo@lein ~/code/repos/grocery (master) $ 

# How to go into a detached state:
git checkout HEAD~1

# How to check differences with the staging area:
git diff --cached HEAD

# How to clean up all the staged changes in one shot:
git reset HEAD

# How to overwrite all the three areas:
git reset --hard master

# How to go to a non-detached state:
git checkout master

# rebase:
-Combine two or more commits into a new one
-Discard a previous commit you did
-Change the starting point of a branch, split it, and much more

# How to rebase the last two commits:
git rebase -i HEAD~2

# How to continue a rebase branch after fixing a merge conflict:
git rebase --continue

# How to clone a local repo
git clone <LOCAL-REPO-PATH> .

References
http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
